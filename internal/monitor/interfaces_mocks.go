// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package monitor is a generated GoMock package.
package monitor

import (
	context "context"
	subscribs "github.com/alekns/tinyrstats/pkg/helpers/subscribs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskRepository is a mock of TaskRepository interface
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// GetByResponseTimeMinOrMax mocks base method
func (m *MockTaskRepository) GetByResponseTimeMinOrMax(arg0 context.Context, arg1 bool) (*Task, error) {
	ret := m.ctrl.Call(m, "GetByResponseTimeMinOrMax", arg0, arg1)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByResponseTimeMinOrMax indicates an expected call of GetByResponseTimeMinOrMax
func (mr *MockTaskRepositoryMockRecorder) GetByResponseTimeMinOrMax(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByResponseTimeMinOrMax", reflect.TypeOf((*MockTaskRepository)(nil).GetByResponseTimeMinOrMax), arg0, arg1)
}

// GetByID mocks base method
func (m *MockTaskRepository) GetByID(arg0 context.Context, arg1 TaskID) (*Task, error) {
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockTaskRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTaskRepository)(nil).GetByID), arg0, arg1)
}

// Save mocks base method
func (m *MockTaskRepository) Save(arg0 context.Context, arg1 *Task) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockTaskRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskRepository)(nil).Save), arg0, arg1)
}

// Delete mocks base method
func (m *MockTaskRepository) Delete(arg0 context.Context, arg1 TaskID) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTaskRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), arg0, arg1)
}

// DeleteAll mocks base method
func (m *MockTaskRepository) DeleteAll(arg0 context.Context) {
	m.ctrl.Call(m, "DeleteAll", arg0)
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockTaskRepositoryMockRecorder) DeleteAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTaskRepository)(nil).DeleteAll), arg0)
}

// MockHealthService is a mock of HealthService interface
type MockHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServiceMockRecorder
}

// MockHealthServiceMockRecorder is the mock recorder for MockHealthService
type MockHealthServiceMockRecorder struct {
	mock *MockHealthService
}

// NewMockHealthService creates a new mock instance
func NewMockHealthService(ctrl *gomock.Controller) *MockHealthService {
	mock := &MockHealthService{ctrl: ctrl}
	mock.recorder = &MockHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealthService) EXPECT() *MockHealthServiceMockRecorder {
	return m.recorder
}

// CheckStatus mocks base method
func (m *MockHealthService) CheckStatus(arg0 context.Context, arg1 *HealthTask) (*HealthTaskStatus, error) {
	ret := m.ctrl.Call(m, "CheckStatus", arg0, arg1)
	ret0, _ := ret[0].(*HealthTaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStatus indicates an expected call of CheckStatus
func (mr *MockHealthServiceMockRecorder) CheckStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatus", reflect.TypeOf((*MockHealthService)(nil).CheckStatus), arg0, arg1)
}

// MockScheduleTaskService is a mock of ScheduleTaskService interface
type MockScheduleTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleTaskServiceMockRecorder
}

// MockScheduleTaskServiceMockRecorder is the mock recorder for MockScheduleTaskService
type MockScheduleTaskServiceMockRecorder struct {
	mock *MockScheduleTaskService
}

// NewMockScheduleTaskService creates a new mock instance
func NewMockScheduleTaskService(ctrl *gomock.Controller) *MockScheduleTaskService {
	mock := &MockScheduleTaskService{ctrl: ctrl}
	mock.recorder = &MockScheduleTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduleTaskService) EXPECT() *MockScheduleTaskServiceMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockScheduleTaskService) Schedule(arg0 context.Context, arg1 TaskID, arg2 *ScheduleHealthTask) error {
	ret := m.ctrl.Call(m, "Schedule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockScheduleTaskServiceMockRecorder) Schedule(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockScheduleTaskService)(nil).Schedule), arg0, arg1, arg2)
}

// Cancel mocks base method
func (m *MockScheduleTaskService) Cancel(arg0 context.Context, arg1 TaskID) error {
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockScheduleTaskServiceMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockScheduleTaskService)(nil).Cancel), arg0, arg1)
}

// CancelAll mocks base method
func (m *MockScheduleTaskService) CancelAll(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "CancelAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAll indicates an expected call of CancelAll
func (mr *MockScheduleTaskServiceMockRecorder) CancelAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAll", reflect.TypeOf((*MockScheduleTaskService)(nil).CancelAll), arg0)
}

// MockEvents is a mock of Events interface
type MockEvents struct {
	ctrl     *gomock.Controller
	recorder *MockEventsMockRecorder
}

// MockEventsMockRecorder is the mock recorder for MockEvents
type MockEventsMockRecorder struct {
	mock *MockEvents
}

// NewMockEvents creates a new mock instance
func NewMockEvents(ctrl *gomock.Controller) *MockEvents {
	mock := &MockEvents{ctrl: ctrl}
	mock.recorder = &MockEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvents) EXPECT() *MockEventsMockRecorder {
	return m.recorder
}

// TaskQueriedByURL mocks base method
func (m *MockEvents) TaskQueriedByURL() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "TaskQueriedByURL")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// TaskQueriedByURL indicates an expected call of TaskQueriedByURL
func (mr *MockEventsMockRecorder) TaskQueriedByURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskQueriedByURL", reflect.TypeOf((*MockEvents)(nil).TaskQueriedByURL))
}

// TaskQueriedByMinResponse mocks base method
func (m *MockEvents) TaskQueriedByMinResponse() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "TaskQueriedByMinResponse")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// TaskQueriedByMinResponse indicates an expected call of TaskQueriedByMinResponse
func (mr *MockEventsMockRecorder) TaskQueriedByMinResponse() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskQueriedByMinResponse", reflect.TypeOf((*MockEvents)(nil).TaskQueriedByMinResponse))
}

// TaskQueriedByMaxResponse mocks base method
func (m *MockEvents) TaskQueriedByMaxResponse() subscribs.EventHandler {
	ret := m.ctrl.Call(m, "TaskQueriedByMaxResponse")
	ret0, _ := ret[0].(subscribs.EventHandler)
	return ret0
}

// TaskQueriedByMaxResponse indicates an expected call of TaskQueriedByMaxResponse
func (mr *MockEventsMockRecorder) TaskQueriedByMaxResponse() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskQueriedByMaxResponse", reflect.TypeOf((*MockEvents)(nil).TaskQueriedByMaxResponse))
}

// MockStatsService is a mock of StatsService interface
type MockStatsService struct {
	ctrl     *gomock.Controller
	recorder *MockStatsServiceMockRecorder
}

// MockStatsServiceMockRecorder is the mock recorder for MockStatsService
type MockStatsServiceMockRecorder struct {
	mock *MockStatsService
}

// NewMockStatsService creates a new mock instance
func NewMockStatsService(ctrl *gomock.Controller) *MockStatsService {
	mock := &MockStatsService{ctrl: ctrl}
	mock.recorder = &MockStatsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsService) EXPECT() *MockStatsServiceMockRecorder {
	return m.recorder
}

// GetAllHosts mocks base method
func (m *MockStatsService) GetAllHosts() StatsHostsInfo {
	ret := m.ctrl.Call(m, "GetAllHosts")
	ret0, _ := ret[0].(StatsHostsInfo)
	return ret0
}

// GetAllHosts indicates an expected call of GetAllHosts
func (mr *MockStatsServiceMockRecorder) GetAllHosts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHosts", reflect.TypeOf((*MockStatsService)(nil).GetAllHosts))
}

// GetMinMax mocks base method
func (m *MockStatsService) GetMinMax() (int32, int32) {
	ret := m.ctrl.Call(m, "GetMinMax")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	return ret0, ret1
}

// GetMinMax indicates an expected call of GetMinMax
func (mr *MockStatsServiceMockRecorder) GetMinMax() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinMax", reflect.TypeOf((*MockStatsService)(nil).GetMinMax))
}

// AddHost mocks base method
func (m *MockStatsService) AddHost(arg0 string, arg1 int) {
	m.ctrl.Call(m, "AddHost", arg0, arg1)
}

// AddHost indicates an expected call of AddHost
func (mr *MockStatsServiceMockRecorder) AddHost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockStatsService)(nil).AddHost), arg0, arg1)
}

// AddMinMax mocks base method
func (m *MockStatsService) AddMinMax(arg0 bool, arg1 int32) {
	m.ctrl.Call(m, "AddMinMax", arg0, arg1)
}

// AddMinMax indicates an expected call of AddMinMax
func (mr *MockStatsServiceMockRecorder) AddMinMax(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMinMax", reflect.TypeOf((*MockStatsService)(nil).AddMinMax), arg0, arg1)
}

// DeleteHost mocks base method
func (m *MockStatsService) DeleteHost(arg0 string) {
	m.ctrl.Call(m, "DeleteHost", arg0)
}

// DeleteHost indicates an expected call of DeleteHost
func (mr *MockStatsServiceMockRecorder) DeleteHost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockStatsService)(nil).DeleteHost), arg0)
}

// MockTaskApp is a mock of TaskApp interface
type MockTaskApp struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAppMockRecorder
}

// MockTaskAppMockRecorder is the mock recorder for MockTaskApp
type MockTaskAppMockRecorder struct {
	mock *MockTaskApp
}

// NewMockTaskApp creates a new mock instance
func NewMockTaskApp(ctrl *gomock.Controller) *MockTaskApp {
	mock := &MockTaskApp{ctrl: ctrl}
	mock.recorder = &MockTaskAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskApp) EXPECT() *MockTaskAppMockRecorder {
	return m.recorder
}

// CreateAndRun mocks base method
func (m *MockTaskApp) CreateAndRun(arg0 context.Context, arg1 *CreateTaskCommand) (*CreateTaskResult, error) {
	ret := m.ctrl.Call(m, "CreateAndRun", arg0, arg1)
	ret0, _ := ret[0].(*CreateTaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndRun indicates an expected call of CreateAndRun
func (mr *MockTaskAppMockRecorder) CreateAndRun(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndRun", reflect.TypeOf((*MockTaskApp)(nil).CreateAndRun), arg0, arg1)
}

// QueryBy mocks base method
func (m *MockTaskApp) QueryBy(arg0 context.Context, arg1 *QueryTask) (*QueryTaskResult, error) {
	ret := m.ctrl.Call(m, "QueryBy", arg0, arg1)
	ret0, _ := ret[0].(*QueryTaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBy indicates an expected call of QueryBy
func (mr *MockTaskAppMockRecorder) QueryBy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBy", reflect.TypeOf((*MockTaskApp)(nil).QueryBy), arg0, arg1)
}

// MockStatsApp is a mock of StatsApp interface
type MockStatsApp struct {
	ctrl     *gomock.Controller
	recorder *MockStatsAppMockRecorder
}

// MockStatsAppMockRecorder is the mock recorder for MockStatsApp
type MockStatsAppMockRecorder struct {
	mock *MockStatsApp
}

// NewMockStatsApp creates a new mock instance
func NewMockStatsApp(ctrl *gomock.Controller) *MockStatsApp {
	mock := &MockStatsApp{ctrl: ctrl}
	mock.recorder = &MockStatsAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsApp) EXPECT() *MockStatsAppMockRecorder {
	return m.recorder
}

// QueryBy mocks base method
func (m *MockStatsApp) QueryBy(arg0 context.Context, arg1 *QueryCallStatistic) (*QueryCallStatisticResult, error) {
	ret := m.ctrl.Call(m, "QueryBy", arg0, arg1)
	ret0, _ := ret[0].(*QueryCallStatisticResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBy indicates an expected call of QueryBy
func (mr *MockStatsAppMockRecorder) QueryBy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBy", reflect.TypeOf((*MockStatsApp)(nil).QueryBy), arg0, arg1)
}
